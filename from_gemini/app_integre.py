import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

# --- MODIFICATION : V√©rification de la pr√©sence d'OpenFisca ---
try:
    from openfisca_core.simulation import Simulation
    from openfisca_france import FranceTaxBenefitSystem
    OPENFISCA_READY = True
except ImportError:
    OPENFISCA_READY = False

# ==============================================================================
# INITIALISATION DE L'√âTAT DE LA SESSION (inchang√©)
# ==============================================================================
if 'df_stocks' not in st.session_state:
    st.session_state.df_stocks = pd.DataFrame([
        {'Actif': 'R√©sidence Principale', 'Valeur Nette': 200000, 'Valeur Brute': 300000},
        {'Actif': 'Livret bancaire', 'Valeur Nette': 25000, 'Valeur Brute': 25000},
        {'Actif': 'Assurance Vie', 'Valeur Nette': 50000, 'Valeur Brute': 50000},
    ])
if 'df_revenus' not in st.session_state:
    st.session_state.df_revenus = pd.DataFrame({'Poste': ['Salaire Adulte 1', 'Salaire Adulte 2'], 'Montant Annuel': [45000, 35000]})
if 'df_depenses' not in st.session_state:
    st.session_state.df_depenses = pd.DataFrame({'Poste': ['Pr√™t immobilier', 'D√©penses courantes'], 'Montant Annuel': [15000, 20000]})
if 'df_adultes' not in st.session_state:
    st.session_state.df_adultes = pd.DataFrame([
        {'Pr√©nom': 'Jean', '√Çge': 40, 'Ann√©e D√©part Retraite': 2049},
        {'Pr√©nom': 'Marie', '√Çge': 38, 'Ann√©e D√©part Retraite': 2051}
    ])
if 'df_enfants' not in st.session_state:
    st.session_state.df_enfants = pd.DataFrame([
        {'Pr√©nom': 'L√©o', '√Çge': 12, '√Çge D√©but √âtudes': 18, 'Dur√©e √âtudes (ans)': 5, 'Co√ªt Annuel √âtudes (‚Ç¨)': 8000},
    ])
if 'hyp_retraite' not in st.session_state:
    st.session_state.hyp_retraite = {'taux_remplacement': 60.0}

# ==============================================================================
# D√âFINITION DES PAGES DE L'APPLICATION (inchang√©es)
# ==============================================================================

def page_stocks():
    st.title("üí∞ Repr√©sentation du Patrimoine du Foyer (Stocks)")
    # (Code inchang√©)
    edited_df = st.data_editor(st.session_state.df_stocks, num_rows="dynamic", use_container_width=True, column_config={"Valeur Nette": st.column_config.NumberColumn(format="%d ‚Ç¨"), "Valeur Brute": st.column_config.NumberColumn(format="%d ‚Ç¨")})
    st.session_state.df_stocks = edited_df
    def get_type_patrimoine(actif):
        return "Immobilier" if "immo" in actif.lower() or "r√©sidence" in actif.lower() else "Financier"
    df = st.session_state.df_stocks
    df["Type de Patrimoine"] = df["Actif"].apply(get_type_patrimoine)
    total_valeur_nette = df["Valeur Nette"].sum()
    if total_valeur_nette > 0:
        fig = px.treemap(df, path=['Type de Patrimoine', 'Actif'], values='Valeur Nette', color='Type de Patrimoine', color_discrete_map={"Immobilier": "#1f77b4", "Financier": "#ff7f0e"}, title='R√©partition du Patrimoine Net')
        fig.update_traces(textinfo='label+percent parent+value')
        st.plotly_chart(fig, use_container_width=True)

def page_flux():
    st.title("üí∏ Suivi des Flux Financiers du Foyer")
    # (Code inchang√©)
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Revenus Annuels")
        edited_revenus = st.data_editor(st.session_state.df_revenus, num_rows="dynamic", key="editor_revenus", use_container_width=True, column_config={"Montant Annuel": st.column_config.NumberColumn(format="%d ‚Ç¨")})
        st.session_state.df_revenus = edited_revenus
    with col2:
        st.subheader("D√©penses Annuelles")
        edited_depenses = st.data_editor(st.session_state.df_depenses, num_rows="dynamic", key="editor_depenses", use_container_width=True, column_config={"Montant Annuel": st.column_config.NumberColumn(format="%d ‚Ç¨")})
        st.session_state.df_depenses = edited_depenses
    total_revenus = st.session_state.df_revenus['Montant Annuel'].sum()
    total_depenses = st.session_state.df_depenses['Montant Annuel'].sum()
    reste_a_vivre_annuel = total_revenus - total_depenses
    st.subheader("Bilan Annuel")
    col1_met, col2_met, col3_met = st.columns(3)
    col1_met.metric("Total Revenus", f"{total_revenus:,.0f} ‚Ç¨")
    col2_met.metric("Total D√©penses", f"{total_depenses:,.0f} ‚Ç¨")
    col3_met.metric("Capacit√© d'√âpargne", f"{reste_a_vivre_annuel:,.0f} ‚Ç¨", delta_color="off" if reste_a_vivre_annuel == 0 else "normal")
    st.subheader("R√©partition des D√©penses et de l'√âpargne")
    treemap_data = st.session_state.df_depenses.copy()
    treemap_data['Montant Annuel'] = treemap_data['Montant Annuel'].abs()
    if reste_a_vivre_annuel > 0:
        new_row = pd.DataFrame([{'Poste': 'Capacit√© d\'√âpargne', 'Montant Annuel': reste_a_vivre_annuel}])
        treemap_data = pd.concat([treemap_data, new_row], ignore_index=True)
    if not treemap_data.empty:
        fig_treemap = px.treemap(treemap_data, path=['Poste'], values='Montant Annuel', color='Poste', title="R√©partition des D√©penses Annuelles et de l'√âpargne")
        fig_treemap.update_traces(textinfo='label+value+percent root')
        st.plotly_chart(fig_treemap, use_container_width=True)

def page_famille():
    st.title("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Composition de la Famille et √âv√©nements de Vie")
    # (Code inchang√©)
    st.subheader("Adultes")
    st.session_state.df_adultes = st.data_editor(st.session_state.df_adultes, num_rows="dynamic", key="editor_adultes", use_container_width=True)
    st.subheader("Enfants")
    st.session_state.df_enfants = st.data_editor(st.session_state.df_enfants, num_rows="dynamic", key="editor_enfants", use_container_width=True, column_config={"Co√ªt Annuel √âtudes (‚Ç¨)": st.column_config.NumberColumn(format="%d ‚Ç¨")})
    st.subheader("Hypoth√®ses pour la retraite")
    st.session_state.hyp_retraite['taux_remplacement'] = st.slider("Taux de remplacement du revenu √† la retraite (%)", min_value=30.0, max_value=100.0, value=st.session_state.hyp_retraite['taux_remplacement'])

def page_projection():
    st.title("üìà Projection de l'√âvolution des Flux")

    # --- MODIFICATION : D√©finition de la fonction de calcul OpenFisca ---
    @st.cache_data
    def calculer_impot_openfisca(annee, revenus_imposables, foyer_parts):
        """Calcule l'imp√¥t en utilisant OpenFisca."""
        if not OPENFISCA_READY:
            # Fallback vers le calcul simplifi√©
            tranches = [
                (0, 11294, 0), (11295, 28797, 0.11), (28798, 82341, 0.30),
                (82342, 171330, 0.41), (171331, float('inf'), 0.45)
            ]
            if foyer_parts['nb_parts'] <= 0: return 0
            qf = revenus_imposables / foyer_parts['nb_parts']
            impot = 0
            for tr_min, tr_max, taux in tranches:
                if qf > tr_min:
                    impot += (min(qf, tr_max) - tr_min) * taux
            return impot * foyer_parts['nb_parts']

        # Construction de la situation pour OpenFisca
        tax_benefit_system = FranceTaxBenefitSystem()
        
        personnes = []
        ids_personnes = []

        # On r√©partit le revenu sur les adultes actifs
        revenu_par_adulte_actif = revenus_imposables / foyer_parts['adultes_actifs'] if foyer_parts['adultes_actifs'] > 0 else 0
        
        for i, adulte in enumerate(foyer_parts['adultes_details']):
            person_id = f"adulte_{i+1}"
            ids_personnes.append(person_id)
            personnes.append({
                'id': person_id,
                'date_de_naissance': pd.to_datetime(f"{adulte['annee_naissance']}-01-01"),
                'salaire_imposable': revenu_par_adulte_actif if not adulte['est_retraite'] else 0,
                'pensions_retraites_imposables': revenu_par_adulte_actif if adulte['est_retraite'] else 0
            })
        
        for i, enfant in enumerate(foyer_parts['enfants_details']):
             person_id = f"enfant_{i+1}"
             ids_personnes.append(person_id)
             personnes.append({'id': person_id, 'date_de_naissance': pd.to_datetime(f"{enfant['annee_naissance']}-01-01")})

        situation = {
            'personnes': personnes,
            'foyers_fiscaux': [{'id': 'foyer1', 'declarateur_principal': 'adulte_1', 'personnes': ids_personnes}],
            'menages': [{'id': 'menage1', 'personne_de_reference': 'adulte_1', 'personnes': ids_personnes}]
        }
        
        simulation = Simulation(tax_benefit_system, start_date=f"{annee}-01-01")
        resultat = simulation.run(situation)
        
        return float(resultat['impot_sur_le_revenu_net_a_payer'].sum())

    def generer_tableau_financier(duree, revenus_df, depenses_df, adultes_df, enfants_df, hyp_retraite):
        annee_actuelle = datetime.now().year
        annees_projection = range(annee_actuelle, annee_actuelle + duree)
        
        sim_revenus = revenus_df.copy()
        sim_depenses = depenses_df.copy()
        salaires_de_base = sim_revenus.copy()
        
        adultes_df_sim = adultes_df.copy()
        adultes_df_sim['Ann√©e Naissance'] = annee_actuelle - adultes_df_sim['√Çge']
        
        enfants_df_sim = enfants_df.copy()
        if not enfants_df_sim.empty:
            enfants_df_sim['Ann√©e Naissance'] = annee_actuelle - enfants_df_sim['√Çge']
            enfants_df_sim['Ann√©e Fin √âtudes'] = enfants_df_sim['Ann√©e Naissance'] + enfants_df_sim['√Çge D√©but √âtudes'] + enfants_df_sim['Dur√©e √âtudes (ans)']

        data = []
        for annee in annees_projection:
            # GESTION DES √âV√âNEMENTS
            nb_enfants_a_charge = 0
            depenses_etudes_annuelles = 0
            adultes_actifs_count = 0
            adultes_details_list = []
            enfants_details_list = []

            for idx, adulte in adultes_df_sim.iterrows():
                est_retraite = annee >= adulte['Ann√©e D√©part Retraite']
                if not est_retraite:
                    adultes_actifs_count += 1
                adultes_details_list.append({'annee_naissance': adulte['Ann√©e Naissance'], 'est_retraite': est_retraite})
                if est_retraite and idx < len(sim_revenus):
                   salaire_avant = salaires_de_base.loc[idx, 'Montant Annuel']
                   sim_revenus.loc[idx, 'Montant Annuel'] = salaire_avant * (hyp_retraite['taux_remplacement'] / 100)

            if not enfants_df_sim.empty:
                for _, enfant in enfants_df_sim.iterrows():
                    age_enfant = annee - enfant['Ann√©e Naissance']
                    if enfant['√Çge D√©but √âtudes'] <= age_enfant < (enfant['√Çge D√©but √âtudes'] + enfant['Dur√©e √âtudes (ans)']):
                        depenses_etudes_annuelles += enfant['Co√ªt Annuel √âtudes (‚Ç¨)']
                    if annee < enfant['Ann√©e Fin √âtudes']:
                        nb_enfants_a_charge += 1
                        enfants_details_list.append({'annee_naissance': enfant['Ann√©e Naissance']})

            # CALCULS ANNUELS
            revenus_courants = sim_revenus['Montant Annuel'].sum()
            depenses_courantes = sim_depenses['Montant Annuel'].sum() + depenses_etudes_annuelles
            
            nb_parts = len(adultes_df) + nb_enfants_a_charge * 0.5
            foyer_pour_impot = {
                'nb_parts': nb_parts,
                'adultes_actifs': adultes_actifs_count,
                'adultes_details': adultes_details_list,
                'enfants_details': enfants_details_list
            }
            # --- MODIFICATION : Appel √† la fonction OpenFisca ---
            impot_annuel = calculer_impot_openfisca(annee, revenus_courants, foyer_pour_impot)
            
            capacite_epargne = revenus_courants - depenses_courantes - impot_annuel

            data.append({"Ann√©e": annee, "Nb Parts": nb_parts, "Revenu Annuel": revenus_courants, "Charges Fixes": depenses_courantes, "Imp√¥t sur le Revenu": impot_annuel, "Capacit√© d'√âpargne": capacite_epargne})

            # √âvolution pour l'ann√©e suivante
            sim_depenses['Montant Annuel'] *= 1.02
            for idx, adulte in adultes_df_sim.iterrows():
                 if annee < adulte['Ann√©e D√©part Retraite'] and idx < len(sim_revenus):
                    sim_revenus.loc[idx, 'Montant Annuel'] *= 1.015

        return pd.DataFrame(data)

    # --- Interface Utilisateur ---
    duree_simulation = st.slider("Dur√©e de la simulation (ann√©es)", 1, 50, 25)

    if st.button("üöÄ Lancer la Projection D√©taill√©e", type="primary"):
        # ... (le reste de l'interface est inchang√©)
        tableau_financier = generer_tableau_financier(duree_simulation, st.session_state.df_revenus, st.session_state.df_depenses, st.session_state.df_adultes, st.session_state.df_enfants, st.session_state.hyp_retraite)
        st.session_state.tableau_financier = tableau_financier
        
    if 'tableau_financier' in st.session_state:
        tableau_financier = st.session_state.tableau_financier
        st.dataframe(tableau_financier, use_container_width=True, hide_index=True)
        # (Le reste du code d'affichage est inchang√©)
        st.subheader("Graphiques de la projection")
        st.subheader("R√©partition du Revenu Annuel")
        df_plot = tableau_financier.copy()
        fig_stacked_flows = px.bar(df_plot, x="Ann√©e", y=["Charges Fixes", "Imp√¥t sur le Revenu", "Capacit√© d'√âpargne"], title="R√©partition du Revenu Annuel", labels={"value": "Montant Annuel (‚Ç¨)", "variable": "Poste de D√©pense"}, color_discrete_map={"Charges Fixes": "indianred", "Imp√¥t sur le Revenu": "gold", "Capacit√© d'√âpargne": "mediumseagreen"})
        fig_stacked_flows.add_trace(px.line(df_plot, x="Ann√©e", y="Revenu Annuel").data[0])
        fig_stacked_flows.data[-1].name = 'Revenu Annuel'
        fig_stacked_flows.data[-1].line.color = 'royalblue'
        st.plotly_chart(fig_stacked_flows, use_container_width=True)
        st.subheader("√âvolution de la Capacit√© d'√âpargne")
        fig_rav = px.line(tableau_financier, x="Ann√©e", y="Capacit√© d'√âpargne", title="√âvolution de la Capacit√© d'√âpargne Annuelle (Reste √† Vivre)")
        st.plotly_chart(fig_rav, use_container_width=True)

# ==============================================================================
# NAVIGATION PRINCIPALE DE L'APPLICATION
# ==============================================================================
st.sidebar.title("D√©veloppement Audit")
selection = st.sidebar.radio("Navigation", ["Patrimoine (Stocks)", "Budget (Flux)", "Famille & √âv√©nements", "Projection"])

# --- MODIFICATION : Avertissement si OpenFisca n'est pas disponible ---
if not OPENFISCA_READY:
    st.sidebar.warning("OpenFisca non d√©tect√©. Le calcul d'imp√¥t sera simplifi√©. Pour un calcul pr√©cis, installez `openfisca-france`.")

if selection == "Patrimoine (Stocks)":
    page_stocks()
elif selection == "Budget (Flux)":
    page_flux()
elif selection == "Famille & √âv√©nements":
    page_famille()
elif selection == "Projection":
    page_projection()