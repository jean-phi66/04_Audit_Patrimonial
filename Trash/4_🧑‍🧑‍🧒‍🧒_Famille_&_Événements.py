# pages/3_üë®‚Äçüë©‚Äçüëß‚Äçüë¶_Famille_&_√âv√©nements.py
import streamlit as st
import pandas as pd
from datetime import datetime

st.title("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Famille & √âv√©nements")
col1, col2 = st.columns(2)
with col1:
    st.subheader("Adultes")
    st.session_state.df_adultes = st.data_editor(st.session_state.df_adultes, num_rows="dynamic", key="editor_adultes", use_container_width=True)
    if len(st.session_state.df_adultes) == 1:
        st.session_state.parent_isole = st.checkbox("Parent isol√© (coche la case T de la d√©claration)", value=st.session_state.get('parent_isole', False))
    else:
        st.session_state.parent_isole = False
with col2:
    st.subheader("Enfants")
    st.session_state.df_enfants = st.data_editor(st.session_state.df_enfants, num_rows="dynamic", key="editor_enfants", use_container_width=True, column_config={"Co√ªt Annuel √âtudes (‚Ç¨)": st.column_config.NumberColumn(format="%d ‚Ç¨")})

st.divider()
st.subheader("Hypoth√®ses de Retraite (Pensions Annuelles par Adulte)")

adult_names = []
if 'df_adultes' in st.session_state and not st.session_state.df_adultes.empty:
    adult_names = st.session_state.df_adultes['Pr√©nom'].tolist()

    # S'assurer que l'√¢ge des adultes est num√©rique pour les calculs
    if '√Çge' in st.session_state.df_adultes.columns:
        st.session_state.df_adultes['√Çge'] = pd.to_numeric(st.session_state.df_adultes['√Çge'], errors='coerce')

if not adult_names:
    st.info("Veuillez d'abord ajouter des adultes pour d√©finir leurs hypoth√®ses de pension.")
else:
    # Colonnes de base pour les hypoth√®ses de pension (sans l'ann√©e calcul√©e)
    base_pension_cols = ['Pr√©nom Adulte', '√Çge D√©part Retraite', 'Montant Pension Annuelle (‚Ç¨)', 'Active']
    # Colonnes pour l'√©diteur sp√©cifique √† chaque adulte
    editor_cols_per_adult = ['√Çge D√©part Retraite', 'Montant Pension Annuelle (‚Ç¨)', 'Active']

    # V√©rification de df_pension_hypotheses (normalement initialis√© par state_manager)
    if 'df_pension_hypotheses' not in st.session_state or not isinstance(st.session_state.df_pension_hypotheses, pd.DataFrame):
        st.session_state.df_pension_hypotheses = pd.DataFrame(columns=base_pension_cols + ['Ann√©e D√©part Retraite'])
    
    # S'assurer que les colonnes de base et les types sont corrects (redondant si state_manager est bien ex√©cut√©, mais s√©curisant)
    for col in base_pension_cols:
        if col not in st.session_state.df_pension_hypotheses.columns:
            st.session_state.df_pension_hypotheses[col] = pd.NA
    if not st.session_state.df_pension_hypotheses.empty:
        # Conversion de type pour les colonnes qui seront √©dit√©es, si elles existent d√©j√†
        # Cela garantit que les donn√©es pass√©es √† data_for_editor sont correctement typ√©es.
        # Le type 'boolean' (nullable) est pr√©f√©rable pour 'Active' s'il peut y avoir des NA avant la premi√®re √©dition.
        # Cependant, CheckboxColumn avec default devrait g√©rer cela.
        # La conversion principale des types est maintenant dans state_manager.
        for col in editor_cols_per_adult:
            if col in st.session_state.df_pension_hypotheses.columns:
                if col == 'Active':
                    # Fill NA values with False before casting to boolean
                    st.session_state.df_pension_hypotheses[col] = st.session_state.df_pension_hypotheses[col].fillna(False).astype(bool)
                else: # For other columns in editor_cols_per_adult, cast to numeric
                    st.session_state.df_pension_hypotheses[col] = pd.to_numeric(st.session_state.df_pension_hypotheses[col], errors='coerce')

    all_adults_edited_hypotheses_list = []

    for adult_name in adult_names:
        st.markdown(f"##### Hypoth√®ses de pension pour {adult_name}")
        
        # Filtrer les hypoth√®ses existantes pour l'adulte courant
        current_adult_hypotheses_df = st.session_state.df_pension_hypotheses[
            st.session_state.df_pension_hypotheses['Pr√©nom Adulte'] == adult_name
        ].copy()

        # Pr√©parer les donn√©es pour l'√©diteur
        if not current_adult_hypotheses_df.empty:
            data_for_editor = current_adult_hypotheses_df[editor_cols_per_adult].copy()
        else:
            # Cr√©er un DataFrame vide avec les colonnes et types attendus par l'√©diteur
            data_for_editor = pd.DataFrame(columns=editor_cols_per_adult)
            # Assurer les types pour que le data_editor vide se comporte correctement
            data_for_editor['√Çge D√©part Retraite'] = pd.Series(dtype='Int64')
            data_for_editor['Montant Pension Annuelle (‚Ç¨)'] = pd.Series(dtype='float64')
            data_for_editor['Active'] = pd.Series(dtype='boolean')

        edited_adult_specific_data = st.data_editor(
            data_for_editor,
            num_rows="dynamic",
            key=f"pension_editor_{adult_name.replace(' ', '_').lower()}", # Cl√© unique et valide
            use_container_width=True,
            column_config={
                "√Çge D√©part Retraite": st.column_config.NumberColumn(
                    "√Çge D√©part Retraite", min_value=50, max_value=80, step=1, format="%d", required=True
                ),
                "Montant Pension Annuelle (‚Ç¨)": st.column_config.NumberColumn(
                    "Montant Pension Annuelle (‚Ç¨)", min_value=0, step=1000, format="%d ‚Ç¨", required=True
                ),
                "Active": st.column_config.CheckboxColumn("Active pour la simulation ?", default=False, required=True)
            }
        )

        # Si des donn√©es ont √©t√© √©dit√©es/ajout√©es pour cet adulte, les pr√©parer pour la consolidation
        # V√©rifier si le DataFrame retourn√© n'est pas vide ET s'il contient des donn√©es non-NA
        if not edited_adult_specific_data.dropna(how='all').empty:
            df_to_add = edited_adult_specific_data.copy()
            df_to_add['Pr√©nom Adulte'] = adult_name # Rajouter le pr√©nom de l'adulte
            
            # S'assurer qu'une seule hypoth√®se est active par adulte
            if 'Active' in edited_adult_specific_data.columns:
                active_rows = edited_adult_specific_data[edited_adult_specific_data['Active'] == True]
                if len(active_rows) > 1:
                    st.warning(f"Plusieurs hypoth√®ses de retraite sont marqu√©es comme 'Actives' pour {adult_name}. Seule la premi√®re sera consid√©r√©e dans la projection. Veuillez n'en activer qu'une seule.")
                    # Optionnel: forcer une seule active (par exemple, la derni√®re coch√©e ou la premi√®re dans la liste)
                    # Pour l'instant, on laisse l'utilisateur g√©rer avec un avertissement, la projection prendra la premi√®re active.
                elif len(active_rows) == 0 and not edited_adult_specific_data.empty:
                     # Si aucune n'est active et qu'il y a des hypoth√®ses, on pourrait activer la premi√®re par d√©faut
                     # ou laisser l'utilisateur le faire explicitement.
                     # Pour l'instant, si aucune n'est active, aucune pension ne sera prise pour cet adulte.
                     pass

            all_adults_edited_hypotheses_list.append(df_to_add)

    # Consolider les hypoth√®ses de tous les adultes
    if all_adults_edited_hypotheses_list:
        consolidated_df = pd.concat(all_adults_edited_hypotheses_list, ignore_index=True)
        # S'assurer que les colonnes de base sont pr√©sentes et dans le bon ordre
        consolidated_df = consolidated_df.reindex(columns=base_pension_cols)
    else:
        consolidated_df = pd.DataFrame(columns=base_pension_cols)

    # Calculer 'Ann√©e D√©part Retraite' sur le DataFrame consolid√©
    final_pensions_df = consolidated_df.copy()
    if 'Ann√©e D√©part Retraite' not in final_pensions_df.columns:
        final_pensions_df['Ann√©e D√©part Retraite'] = pd.NA

    if not final_pensions_df.empty and not st.session_state.df_adultes.empty:
        current_year = datetime.now().year
        adult_birth_years = {
            adult['Pr√©nom']: current_year - adult['√Çge'] 
            for _, adult in st.session_state.df_adultes.iterrows() if pd.notna(adult['√Çge'])
        }

        for index, row in final_pensions_df.iterrows():
            adult_name_hyp = row['Pr√©nom Adulte']
            age_depart_hyp = row['√Çge D√©part Retraite']
            if pd.notna(adult_name_hyp) and adult_name_hyp in adult_birth_years and pd.notna(age_depart_hyp):
                birth_year = adult_birth_years[adult_name_hyp]
                final_pensions_df.loc[index, 'Ann√©e D√©part Retraite'] = int(birth_year + age_depart_hyp)
            else:
                final_pensions_df.loc[index, 'Ann√©e D√©part Retraite'] = pd.NA
    
    st.session_state.df_pension_hypotheses = final_pensions_df
    
    # Affichage d'un avertissement si un adulte a plusieurs hypoth√®ses actives
    if 'Active' in st.session_state.df_pension_hypotheses.columns:
        for adult_name_check in adult_names:
            active_count = st.session_state.df_pension_hypotheses[
                (st.session_state.df_pension_hypotheses['Pr√©nom Adulte'] == adult_name_check) &
                (st.session_state.df_pension_hypotheses['Active'] == True)
            ].shape[0]
            if active_count > 1:
                st.warning(f"Attention : {adult_name_check} a {active_count} hypoth√®ses de retraite marqu√©es comme 'Actives'. La projection utilisera la premi√®re rencontr√©e (celle avec l'√¢ge de d√©part le plus bas parmi les actives). Il est recommand√© de n'activer qu'une seule hypoth√®se par adulte pour une simulation donn√©e.")

st.divider()
st.subheader("√âv√©nements Immobiliers (optionnel)")
st.write("Planifiez ici la revente d'un bien au cours de la projection.")
df_immobilier = st.session_state.df_stocks[st.session_state.df_stocks['Type'].str.contains('Immobilier', na=False)]
liste_biens_immobiliers = df_immobilier['Actif'].tolist()
if not liste_biens_immobiliers:
    st.info("Aucun bien de type 'Immobilier' n'a √©t√© saisi dans l'onglet 'Patrimoine & Dettes'.")
else:
    st.session_state.df_ventes = st.data_editor(st.session_state.df_ventes, num_rows="dynamic", key="editor_ventes", use_container_width=True, column_config={'Ann√©e de Vente': st.column_config.NumberColumn(min_value=datetime.now().year, format="%d"),'Bien √† Vendre': st.column_config.SelectboxColumn("Bien √† Vendre", options=liste_biens_immobiliers, required=True)})