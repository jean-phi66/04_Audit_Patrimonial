# pages/4_üìà_Projection.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from utils.calculs_projection import generer_projection_complete

# Configuration de la barre lat√©rale pour cette page
st.sidebar.title("Param√®tres de Projection")
duree_simulation = st.sidebar.slider("Dur√©e de la simulation (ann√©es)", 1, 50, 25)
lancer_projection = st.sidebar.button("üöÄ Lancer la Projection Compl√®te", type="primary", use_container_width=True)

st.title("üìà Projection de l'√âvolution des Flux et du Patrimoine")
if lancer_projection:
    with st.spinner("Calcul de la projection en cours..."):
        # S'assurer que les hypoth√®ses d'inflation et de revalorisation des salaires sont √† 0
        # pour cette projection, suite √† la suppression des sliders.
        hyp_economiques_projection = st.session_state.hyp_economiques.copy()
        hyp_economiques_projection['inflation'] = 0.0
        hyp_economiques_projection['revalo_salaire'] = 0.0

        tableau_financier, logs = generer_projection_complete(
            duree_simulation,
            st.session_state.df_stocks,
            st.session_state.df_revenus,
            st.session_state.df_depenses,
            st.session_state.df_prets,
            st.session_state.df_adultes,
            st.session_state.df_enfants,
            st.session_state.df_pension_hypotheses,
            hyp_economiques_projection, # Utilisation des hypoth√®ses modifi√©es
            st.session_state.parent_isole,
            st.session_state.df_ventes
        )
        st.session_state.tableau_financier = tableau_financier
        st.session_state.logs_evenements = logs

if 'tableau_financier' in st.session_state and st.session_state.tableau_financier is not None:
    dfp = st.session_state.tableau_financier
    if 'logs_evenements' in st.session_state and st.session_state.logs_evenements:
        st.subheader("Journal des √âv√©nements de la Simulation")
        for log in st.session_state.logs_evenements:
            st.markdown(f"- {log}")

    st.subheader("Analyse des Flux Annuels")
    df_plot_flux = dfp.copy()
    # Pour avoir le Reste √† Vivre en bas, il doit √™tre le premier dans la liste y
    # et on s'assure qu'il est positif pour un empilement correct.
    # Si le Reste √† Vivre peut √™tre n√©gatif, un graphique en cascade serait plus adapt√©,
    # mais pour un empilement simple, on le traite comme une composante positive.
    fig_stacked_flux = px.bar(
        df_plot_flux,
        x="Ann√©e",
        y=["Reste √† Vivre", "Charges (hors pr√™ts)", "Mensualit√©s Pr√™ts", "Imp√¥t sur le Revenu"],
        title="R√©partition du Revenu Annuel (depuis le Reste √† Vivre)",
        labels={"value": "Montant Annuel (‚Ç¨)", "variable": "Poste"},
        color_discrete_map={
            "Reste √† Vivre": "mediumseagreen",
            "Charges (hors pr√™ts)": "lightcoral", # Ajustement couleur pour contraste
            "Mensualit√©s Pr√™ts": "sandybrown",  # Ajustement couleur pour contraste
            "Imp√¥t sur le Revenu": "khaki" # Ajustement couleur pour contraste
        }
    )
    st.plotly_chart(fig_stacked_flux, use_container_width=True)

    # Nouveau graphique pour l'√©volution des statuts
    st.subheader("√âvolution des Statuts des Membres du Foyer")
    statuts_cols = [col for col in dfp.columns if col.endswith('_Statut')]

    # D√©finition de noms_membres ici pour qu'il soit disponible pour le graphique et le tableau
    noms_membres = []
    if 'df_adultes' in st.session_state and not st.session_state.df_adultes.empty:
        noms_membres.extend(st.session_state.df_adultes['Pr√©nom'].tolist())
    if 'df_enfants' in st.session_state and not st.session_state.df_enfants.empty:
        noms_membres.extend(st.session_state.df_enfants['Pr√©nom'].tolist())

    colonnes_statut_membres = [] # Sera utilis√© plus tard pour le tableau des flux
    for nom in noms_membres:
        colonnes_statut_membres.append(f"{nom}_Statut")

    if statuts_cols:
        timeline_data = []
        ordre_statuts = ["Scolaris√©", "√âtudiant", "Actif", "Retrait√©"]
        # D√©finir des couleurs pour chaque statut pour la coh√©rence
        couleurs_statuts = {
            "Scolaris√©": "skyblue",
            "√âtudiant": "lightgreen",
            "Actif": "royalblue",
            "Retrait√©": "silver"
        }

        for col_name in statuts_cols:
            membre_nom = col_name.replace('_Statut', '')
            current_status = None
            start_year = None
            for index, row in dfp.iterrows():
                year = row['Ann√©e']
                status_annee = row[col_name]

                if status_annee != current_status:
                    if current_status is not None and start_year is not None:
                        # Ajouter la p√©riode pr√©c√©dente
                        timeline_data.append(dict(
                            Task=membre_nom,
                            Start=str(start_year) + '-01-01',
                            Finish=str(year) + '-01-01',
                            Resource=current_status,
                            Label=current_status
                        ))
                    current_status = status_annee
                    start_year = year

            # Ajouter la derni√®re p√©riode pour ce membre
            if current_status is not None and start_year is not None:
                timeline_data.append(dict(
                    Task=membre_nom,
                    Start=str(start_year) + '-01-01',
                    Finish=str(dfp['Ann√©e'].max() + 1) + '-01-01', # La p√©riode va jusqu'au d√©but de l'ann√©e suivante
                    Resource=current_status,
                    Label=current_status
                ))

        if timeline_data:
            df_timeline = pd.DataFrame(timeline_data)

            # Ensure Task, Resource, and Label are explicitly strings
            if not df_timeline.empty:
                df_timeline['Task'] = df_timeline['Task'].astype(str).str.strip()
                df_timeline['Resource'] = df_timeline['Resource'].astype(str).str.strip()
                df_timeline['Label'] = df_timeline['Label'].astype(str).str.strip()
                # Convert Start and Finish to datetime objects for Plotly
                df_timeline['Start'] = pd.to_datetime(df_timeline['Start'])
                df_timeline['Finish'] = pd.to_datetime(df_timeline['Finish'])
                # Remplacer "Fin d'√©tudes" par "Actif"
                df_timeline['Resource'] = df_timeline['Resource'].replace("Fin d'√©tudes", "Actif")
                df_timeline['Label'] = df_timeline['Label'].replace("Fin d'√©tudes", "Actif")


            fig_statuts_evolution = px.timeline(
                df_timeline,
                x_start="Start",
                x_end="Finish",
                y="Task",
                color="Resource",
                text="Label",
                title="Chronologie des Statuts par Membre du Foyer",
                labels={"Task": "Membre", "Resource": "Statut"},
                category_orders={"Resource": ordre_statuts}, # Ordonne les l√©gendes et potentiellement les couleurs si non mapp√©es
                color_discrete_map=couleurs_statuts
            )
            fig_statuts_evolution.update_yaxes(categoryorder="array", categoryarray=noms_membres) # Ordonner les membres sur l'axe Y
            fig_statuts_evolution.update_layout(xaxis_title="Ann√©e")
            st.plotly_chart(fig_statuts_evolution, use_container_width=True)
        else:
            st.info("Aucune donn√©e de p√©riode de statut n'a pu √™tre g√©n√©r√©e pour la chronologie (timeline_data est vide).")

    st.subheader("Tableau des Flux Annuels")

    # Utiliser colonnes_statut_membres d√©j√† d√©fini plus haut
    colonnes_statut_membres_existantes = [col for col in colonnes_statut_membres if col in dfp.columns]

    flux_columns_base = ["Revenu Annuel", "Charges (hors pr√™ts)", "Mensualit√©s Pr√™ts", "Imp√¥t sur le Revenu", "Reste √† Vivre"]
    flux_columns_final = ["Ann√©e"] + colonnes_statut_membres_existantes + flux_columns_base
    df_flux_table = dfp[[col for col in flux_columns_final if col in dfp.columns]] # S'assurer que toutes les colonnes existent
    st.dataframe(df_flux_table.style.format(precision=0, na_rep='-'), use_container_width=True, hide_index=True)

    st.subheader("Analyse du Patrimoine")

    # Graphique de la composition du patrimoine BRUT
    fig_pat_composition = px.area(
        dfp,
        x='Ann√©e',
        y=['Patrimoine Financier', 'Immobilier Jouissance', 'Immobilier Productif'],
        title="√âvolution de la Composition du Patrimoine Brut",
        labels={"value": "Valeur (‚Ç¨)", "variable": "Type d'Actif"},
        color_discrete_map={
            "Patrimoine Financier": "#ff7f0e",
            "Immobilier Jouissance": "#1f77b4",
            "Immobilier Productif": "#636EFA"
        }
    )
    st.plotly_chart(fig_pat_composition, use_container_width=True)

    # Graphique Actifs vs Passifs pour voir le NET
    df_plot_bilan = pd.DataFrame({'Ann√©e': dfp['Ann√©e'], 'Actifs': dfp['Actifs Totaux'], 'Passifs': -dfp['Passifs Totaux']})
    fig_bilan = px.bar(
        df_plot_bilan.melt(id_vars='Ann√©e', var_name='Type', value_name='Valeur'),
        x='Ann√©e', y='Valeur', color='Type',
        title="√âvolution des Actifs et Passifs (Bilan)",
        labels={'Valeur': 'Montant (‚Ç¨)'},
        color_discrete_map={'Actifs': 'mediumseagreen', 'Passifs': 'indianred'}
    )
    # Ajout d'une ligne pour le patrimoine net
    fig_bilan.add_trace(go.Scatter(x=dfp['Ann√©e'], y=dfp['Patrimoine Net'], mode='lines', name='Patrimoine Net', line=dict(color='royalblue', width=3)))
    st.plotly_chart(fig_bilan, use_container_width=True)

    st.subheader("Tableau de l'√âvolution du Patrimoine")
    patrimoine_columns = ["Ann√©e", "Patrimoine Net", "Actifs Totaux", "Passifs Totaux", "Patrimoine Financier", "Immobilier Jouissance", "Immobilier Productif"]
    df_patrimoine_table = dfp[patrimoine_columns]
    st.dataframe(df_patrimoine_table.style.format(precision=0, na_rep='-'), use_container_width=True, hide_index=True)
