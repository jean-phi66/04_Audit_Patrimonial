# pages/8_üíæ_Sauvegarde_&_Chargement.py
import streamlit as st
import os
from utils.state_manager import (
    save_state_to_file, 
    load_state_from_file, 
    reset_state, 
    initialize_session
)

# Configuration de la page
st.set_page_config(page_title="Sauvegarde & Chargement", layout="wide")
st.title("üíæ Sauvegarde & Chargement")

# Initialisation de l'√©tat (important au d√©but de chaque page)
initialize_session()

# --- Section Sauvegarde ---
st.header("Sauvegarder l'√©tat de la session")
save_path = "session_state.json" # Fichier temporaire sur le serveur

if st.button("Pr√©parer le fichier de sauvegarde"):
    save_state_to_file(save_path)

# Le bouton de t√©l√©chargement appara√Æt si le fichier de sauvegarde a √©t√© cr√©√©
if os.path.exists(save_path):
    with open(save_path, "rb") as fp:
        st.download_button(
            label="T√©l√©charger le fichier de sauvegarde",
            data=fp,
            file_name="audit_patrimonial_sauvegarde.json",
            mime="application/json"
        )
    # On peut optionnellement supprimer le fichier temporaire apr√®s pr√©paration
    # os.remove(save_path)

# --- Section Chargement ---
st.header("Charger l'√©tat de la session depuis un fichier")
uploaded_file = st.file_uploader(
    "Choisissez un fichier de sauvegarde (.json)", 
    type="json"
)

if uploaded_file is not None:
    # Le chargement se fait via la fonction du state_manager qui g√®re aussi le st.rerun()
    load_state_from_file(uploaded_file)
    # Il n'est plus n√©cessaire d'avoir un bouton "Charger" car le simple fait
    # de t√©l√©verser un fichier suffit √† le rendre disponible. On pourrait
    # garder un bouton pour une confirmation explicite si souhait√©.

# --- Section R√©initialisation ---
st.header("R√©initialiser l'√©tat")
if st.button("R√©initialiser la session"):
    reset_state()
    st.rerun()

